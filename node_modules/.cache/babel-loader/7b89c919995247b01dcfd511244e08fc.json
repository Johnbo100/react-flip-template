{"ast":null,"code":"var _jsxFileName = \"/Users/name/ReactProjects/flipcardgame/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport SingleCard from './component/SingleCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  src: '/img/helmet-1.png',\n  matched: false\n}, {\n  src: '/img/potion-1.png',\n  matched: false\n}, {\n  src: '/img/ring-1.png',\n  matched: false\n}, {\n  src: '/img/scroll-1.png',\n  matched: false\n}, {\n  src: '/img/shield-1.png',\n  matched: false\n}, {\n  src: '/img/sword-1.png',\n  matched: false\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  /*  console.log(`C1 : `, choiceOne);\n  console.log(`C2 : `, choiceTwo);\n  console.log(turns); */\n  // shuffle cards\n\n  const shuffleCard = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    }));\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  }; // Handle choice\n\n\n  const handleChoice = card => {\n    choiceOne === null ? setChoiceOne(card) : setChoiceTwo(card);\n  }; // to reset the turns and card choice\n\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prev => prev + 1);\n    setDisabled(false);\n  };\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n\n      if (choiceOne.src === choiceTwo.src) {\n        console.log('cards matched');\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return { ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        console.log('cards DONT matched');\n        setTimeout(() => {\n          resetTurn();\n        }, 750);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  console.log(cards); // start the game automatically\n\n  useEffect(() => {\n    shuffleCard();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nimble Memory Match \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Turns : \", turns]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCard,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        flipped: card === choiceOne || card === choiceTwo || card.matched,\n        handleChoice: handleChoice,\n        card: card,\n        disabled: disabled\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 16\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"zpj1OC3lPd52QG2dCYHCz30icbw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/name/ReactProjects/flipcardgame/src/App.js"],"names":["useEffect","useState","SingleCard","cardImages","src","matched","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","disabled","setDisabled","shuffleCard","shuffledCards","sort","Math","random","map","card","id","handleChoice","resetTurn","prev","console","log","prevCards","setTimeout"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\n\nimport SingleCard from './component/SingleCard';\n\nconst cardImages = [\n   { src: '/img/helmet-1.png', matched: false },\n   { src: '/img/potion-1.png', matched: false },\n   { src: '/img/ring-1.png', matched: false },\n   { src: '/img/scroll-1.png', matched: false },\n   { src: '/img/shield-1.png', matched: false },\n   { src: '/img/sword-1.png', matched: false },\n];\n\nfunction App() {\n   const [cards, setCards] = useState([]);\n   const [turns, setTurns] = useState(0);\n   const [choiceOne, setChoiceOne] = useState(null);\n   const [choiceTwo, setChoiceTwo] = useState(null);\n   const [disabled, setDisabled] = useState(false);\n\n   /*  console.log(`C1 : `, choiceOne);\n   console.log(`C2 : `, choiceTwo);\n   console.log(turns); */\n\n   // shuffle cards\n   const shuffleCard = () => {\n      const shuffledCards = [...cardImages, ...cardImages]\n         .sort(() => Math.random() - 0.5)\n         .map((card) => ({ ...card, id: Math.random() }));\n\n      setChoiceOne(null);\n      setChoiceTwo(null);\n      setCards(shuffledCards);\n      setTurns(0);\n   };\n\n   // Handle choice\n   const handleChoice = (card) => {\n      choiceOne === null ? setChoiceOne(card) : setChoiceTwo(card);\n   };\n\n   // to reset the turns and card choice\n   const resetTurn = () => {\n      setChoiceOne(null);\n      setChoiceTwo(null);\n      setTurns((prev) => prev + 1);\n      setDisabled(false);\n   };\n\n   useEffect(() => {\n      if (choiceOne && choiceTwo) {\n         setDisabled(true);\n\n         if (choiceOne.src === choiceTwo.src) {\n            console.log('cards matched');\n            setCards((prevCards) => {\n               return prevCards.map((card) => {\n                  if (card.src === choiceOne.src) {\n                     return { ...card, matched: true };\n                  } else {\n                     return card;\n                  }\n               });\n            });\n            resetTurn();\n         } else {\n            console.log('cards DONT matched');\n            setTimeout(() => {\n               resetTurn();\n            }, 750);\n         }\n      }\n   }, [choiceOne, choiceTwo]);\n\n   console.log(cards);\n\n   // start the game automatically\n   useEffect(() => {\n      shuffleCard();\n   }, []);\n\n   return (\n      <div className=\"App\">\n         <h1>Nimble Memory Match </h1>\n         <h2>Turns : {turns}</h2>\n\n         <button onClick={shuffleCard}>New Game</button>\n         <div className=\"card-grid\">\n            {cards.map((card) => (\n               <SingleCard\n                  flipped={card === choiceOne || card === choiceTwo || card.matched}\n                  handleChoice={handleChoice}\n                  card={card}\n                  key={card.id}\n                  disabled={disabled}\n               />\n            ))}\n         </div>\n      </div>\n   );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}